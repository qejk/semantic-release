 # Evaluates on push event if release is necessary and if so - create a release Pull Request
name: Push or Release branches
on:
  push:
    branches: [master, develop, next, alpha, beta]
    tags-ignore: ['**']
jobs:
  # Release with semantic-release an auto-merged branch to Github repository, NPM, Github package registry
  release:
    name: Release to Github, NPM, Github, GitHub Packages
    runs-on: ubuntu-latest
    needs: [build, test, lintdog]
    if: >
      github.actor != 'semantic-release-bot'
      && ! contains(github.event.head_commit.message, 'chore(release):')
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Release with Semantic-Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        with:
          dry_run: false
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/exec
            @semantic-release/git
      - name: Outputs release
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}
      - name: Setup Node.js with GitHub Package Registry
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/setup-node@v1
        with:
          node-version: 13
          registry-url: 'https://npm.pkg.github.com'
          scope: eveble
      - name: Publish To GitHub Package Registry
        if: steps.semantic.outputs.new_release_published == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ env.GITHUB_TOKEN }}
  # Make sure we can successfully build
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
        # Use jaid/action-npm-install to ensure that correct package manager is used for
        # installing dependencies (based of existence yarn.lock/package-lock.json)
      - name: Install dependencies
        uses: jaid/action-npm-install@v1.2.1
      - run: yarn build
  # unit test with jest
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 13.x, 14.x ]
    name: Test on Node.js@${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
        # Use jaid/action-npm-install to ensure that correct package manager is used for
        # installing dependencies (based of existence yarn.lock/package-lock.json)
      - name: Install dependencies
        uses: jaid/action-npm-install@v1.2.1
      - run: yarn test
  # Lint code and comment back if possible
  lintdog:
    name: eslintdog (reviewdog)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lint and report push
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          eslint_flags: 'src/**/*.ts'