# Evaluates on push event if release is necessary and if so - create a release Pull Request
name: Push to release branches
on:
  push:
    branches: [master, next, alpha, beta]
jobs:
  # Release with semantic-release an auto-merged branch to Github repository, NPM, Github package registry
  release:
    name: Release to Github, NPM, Github, GitHub Packages
    runs-on: ubuntu-latest
    needs: [test, lintdog, build]
    if: >
      github.actor != 'semantic-release-bot'
      && ! contains(github.event.head_commit.message, 'chore(release):')
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      USERNAME: ${{ github.event.github.actor }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Release with Semantic-Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        env:
          SEMANTIC_RELEASE_PACKAGE: '@${{ github.repository }}'
        with:
          semantic_version: 17.0.8
          dry_run: false
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/exec
            @semantic-release/git
      - name: Output release
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}
      - name: Setup Node.js with GitHub Package Registry
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/setup-node@v1
        with:
          node-version: 13
          registry-url: 'https://npm.pkg.github.com'
          scope: ${{ env.USERNAME }}
      # - name: Publish To GitHub Package Registry
      #   if: steps.semantic.outputs.new_release_published == 'true'
      #   run: npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{ env.GITHUB_TOKEN }}
  # Create PR from release branch to master to prepare for release
  check-release:
    name: Check if we need to release
    runs-on: ubuntu-latest
    needs: [test, lintdog, build]
    if: >
      github.actor != 'semantic-release-bot'
      && ! contains(github.event.head_commit.message, 'chore(release):')
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      USERNAME: ${{ github.actor }}
      USER_EMAIL: ${{ github.actor }}@${{ github.actor }}.com
      REPOSITORY_NAME: ${{ github.repository.name }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
        # Evaluate if release is necessary and if so - create a automergable release PR and notify the original creator
      - name: commit format changes and create authors file
        run: |
          git config --local user.email "${{ env.USER_EMAIL }}"
          git config --local user.name "${{ env.USERNAME }}"
          yarn build
          yarn format
          git add -A
          git diff-index --quiet HEAD || git commit -m "Adding format changes ü§ñ" -a
          yarn build
          git add -A
          git diff-index --quiet HEAD || git commit -m "Adding release changes ‚öôÔ∏è" -a
          git log --format='%aN <%aE>%n%cN <%cE>' | sort -u > AUTHORS
          sed -i '/${{ env.USERNAME }}/d' AUTHORS
          sed -i '/semantic-release-bot/d' AUTHORS
          sed -i '/GitHub <noreply@github.com>/d' AUTHORS
          sed -i '/dependabot/d' AUTHORS
          echo -e "\r\n$(date)" >> AUTHORS
          git add -A
          git diff-index --quiet HEAD || git commit -m "Updating AUTHORS üìì" -a
      - name: semantic-release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        env:
          SEMANTIC_RELEASE_PACKAGE: '@${{ github.repository }}'
        with:
          semantic_version: 17.0.8
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/exec
            @semantic-release/git
          dry_run: true
      - name: Output release
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}
      - name: Push potential formatting changes since there is no release
        if: steps.semantic.outputs.new_release_published == 'false'
        run: |
          git config --local user.email "${{ env.USER_EMAIL }}"
          git config --local user.name "${{ env.USERNAME }}"
          git push -f https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:${{ github.ref }}
      - name: Get changed files and format for automerge PR body
        id: file_changes
        uses: trilom/file-changes-action@master
        if: steps.semantic.outputs.new_release_published == 'true'
        with:
          githubToken: ${{ env.GITHUB_TOKEN }}
          output: '_<br />&nbsp;&nbsp;_'
      - name: get original PR number
        uses: actions/github-script@v1
        id: pr
        if: steps.semantic.outputs.new_release_published == 'true'
        with:
          github-token: ${{env.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const result = await github.repos.listPullRequestsAssociatedWithCommit({
              owner: context.payload.repository.owner.name,
              repo: context.payload.repository.name,
              commit_sha: context.payload.head_commit.id
            })
            if (result.data.length >= 1) {
              return result.data[0].number
            } else return 0
      - name: get original PR user
        uses: actions/github-script@v1
        id: login
        if: steps.pr.outputs.result != 0 && steps.semantic.outputs.new_release_published == 'true'
        with:
          github-token: ${{env.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const result = await github.pulls.get({
              owner: context.payload.repository.owner.name,
              repo: context.payload.repository.name,
              pull_number: ${{ steps.pr.outputs.result }}
            })
            if (result.data.user === true && result.data.user.login === true) {
              return result.data.user.login
            } else return '${{ env.USERNAME }}';
      - name: create release PR
        id: create-pr
        uses: peter-evans/create-pull-request@v2
        if: steps.semantic.outputs.new_release_published == 'true'
        with:
          token: ${{ env.GITHUB_TOKEN }}
          commit-message: '${{ github.event.head_commit.message }}'
          committer: ${{ env.USERNAME }} <${{ env.USER_EMAIL }}>
          author: ${{ steps.login.outputs.result }} <${{ steps.login.outputs.result }}@users.noreply.github.com>
          title: 'releases/v${{ steps.semantic.outputs.new_release_version }} [@${{ steps.login.outputs.result }}] - ${{ github.event.head_commit.message }}'
          body: |
            # @${{ steps.login.outputs.result }} would like to merge into ${{ env.REPOSITORY_NAME }}
            [**compare link**](${{ github.event.compare }})
            ## Commits
            ```json
            ${{ toJSON(github.event.commits)}}
            ```

            ## Files

            &nbsp;&nbsp;_${{ steps.file_changes.outputs.files}}_

            ## Files modified

            &nbsp;&nbsp;_${{ steps.file_changes.outputs.files_modified}}_

            ## Files added

            &nbsp;&nbsp;_${{ steps.file_changes.outputs.files_added}}_

            ## Files removed

            &nbsp;&nbsp;_${{ steps.file_changes.outputs.files_removed}}_
          labels: 'automated pr'
          assignees: '${{ steps.login.outputs.result }}, ${{ env.USERNAME }}'
          reviewers:  ${{ env.USERNAME }}
          branch: '${{ steps.semantic.outputs.new_release_version }}'
      - name: notify initial commiter of change
        uses: peter-evans/create-or-update-comment@v1
        if: steps.login.outputs.result != '' && steps.semantic.outputs.new_release_published == 'true'
        with:
          token: ${{ env.GITHUB_TOKEN }}
          issue-number: ${{ steps.pr.outputs.result }}
          body: |
            Hey @${{ steps.login.outputs.result }},
            This merge has triggered a release, hurray!

            [Here you can follow the release.](https://github.com/${{ env.USERNAME }}/${{ env.REPOSITORY_NAME }}/pull/${{ steps.create-pr.outputs.pr_number }})
            Please use this new **Pull Request** if there are any issues to communicate further.
            Thanks!
  # Run tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 13.x, 14.x ]
    name: Test on Node.js@${{ matrix.node-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
        # Use jaid/action-npm-install to ensure that correct package manager is used for
        # installing dependencies (based of existence yarn.lock/package-lock.json)
      - name: Install dependencies
        uses: jaid/action-npm-install@v1.2.1
      - run: yarn test
  # Lint code and comment back if possible
  lintdog:
    name: eslintdog (reviewdog)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lint and report push
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          eslint_flags: 'src/**/*.ts'
  # Make sure we can successfully build
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
        # Use jaid/action-npm-install to ensure that correct package manager is used for
        # installing dependencies (based of existence yarn.lock/package-lock.json)
      - name: Install dependencies
        uses: jaid/action-npm-install@v1.2.1
      - run: yarn build